name: Deploy BE API server to Amazon ECS

on:
  workflow_dispatch:
    branches:
      - main

env:
  AWS_REGION: ${{ vars.AWS_REGION }}                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}          # set this to your Amazon ECR repository name
  ECS_SERVICE: ${{ vars.ECS_SERVICE__BE }}               # set this to your Amazon ECS service name
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ${{ vars.ECS_TASK_DEFINITION__BE }} # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: ${{ vars.CONTAINER_NAME__BE }}          # set this to the name of the container in the
  # containerDefinitions section of your task definition
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  BE_CONTAINER_OVERRIDE: ${{ secrets.BE_CONTAINER_OVERRIDE }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: be_${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          # docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f be/docker/production/Dockerfile --build-arg DATABASE_URL="$DATABASE_URL" be
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        #Using https://github.com/aws-actions/amazon-ecs-deploy-task-definition/releases/tag/v2.1.2
        uses: aws-actions/amazon-ecs-deploy-task-definition@135af6c0ea24f888dcaad892bce3b31cc9e5da64
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
#          run-task-container-overrides: ${{ env.BE_CONTAINER_OVERRIDE }}
#            environment: ${{ format('[{"name":"DATABASE_URL", "value":"{0}"}]', env.DATABASE_URL ) }}
#            environment: '[{"name":"DATABASE_URL", "value":"'${{ env.DATABASE_URL }}'"}]'
